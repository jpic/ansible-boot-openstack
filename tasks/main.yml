---

- name: create new SGs for server if needed
  os_security_group:
    name: "{{ item.name }}"
    description: "{{ item.description }}"
    state: present
    wait: yes
  with_items: "{{ server_create_security_groups }}"
  when: server_create_security_groups != []

- name: Add ingress rules from other security groups
  os_security_group_rule:
    state: present
    security_group: "{{ item.security_group }}"
    protocol: "{{ item.protocol }}"
    port_range_min: "{{ item.port_range_min }}"
    port_range_max: "{{ item.port_range_max }}"
    remote_group: "{{ item.remote_group }}"
    wait: yes
  when: item.remote_group is defined
  with_items: "{{ server_security_group_rules }}"

- name: Add ingress rules from network addresses
  os_security_group_rule:
    state: present
    security_group: "{{ item.security_group }}"
    protocol: "{{ item.protocol }}"
    port_range_min: "{{ item.port_range_min }}"
    port_range_max: "{{ item.port_range_max }}"
    remote_ip_prefix: "{{ item.remote_ip_prefix }}"
    wait: yes
  when: item.remote_ip_prefix is defined
  with_items: "{{ server_security_group_rules }}"

- name: Ensure key is present
  os_keypair:
    state: present
    public_key_file: '{{ lookup("ENV", "HOME") }}/.ssh/id_rsa.pub'
    name: '{{ hostvars[item].get("server_key_name", "") }}'
    wait: yes
  when: hostvars[item].get("server_key_name", "")
  with_items: "{{ groups[server_app] }}"

## need to check if the default valut should be an empty list or dict so that
## we can us os_server without specifying some parameters
## -- can only do one key=value pair not tested multiple keys, and
## -- key=value1,value2 fails
- name: Ensure server is present
  os_server:
    state: present
    name: "{{ item }}"
    security_groups: "{{ server_attach_security_groups }}"
    image: '{{ hostvars[item].get("server_image", "") }}'
    flavor: '{{ hostvars[item].get("server_flavor", "") }}'
    key_name: '{{ hostvars[item].get("server_key_name", "") }}'
    network: '{{ hostvars[item].get("server_internal_network", "") }}'
    meta:
      groups: '{{ hostvars[item].get("server_groups", "") }}'
    auto_ip: no
    wait: yes
  with_items: "{{ groups[server_app] }}"

- os_floating_ip:
    state: present
    server: "{{ item }}"
    network: '{{ hostvars[item].get("server_floating_network", "") }}'
    wait: yes
  when: hostvars[item].get("server_floating_network") != None
  with_items: "{{ groups[server_app] }}"
